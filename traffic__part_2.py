# -*- coding: utf-8 -*-
"""Traffic _part 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rKdLC8JXgtwMTb9ZV56FtLOktm5JHtMj
"""

!pip install xgboost

!pip install scikit-learn==1.2.0

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, LabelEncoder
from xgboost import XGBClassifier
import sys

# Placeholder training for demonstration
X = np.random.randint(0, 300, size=(100, 4))  # Simulated input data
y = np.random.choice(['Low', 'Normal', 'Heavy'], size=100)  # Simulated target
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Placeholder model training
model = XGBClassifier(random_state=42)
model.fit(X_scaled, y_encoded)

# Define signal timing logic
def suggest_signal_timing(traffic_level, base_green=30, base_red=30):
    """
    Suggest signal timing based on traffic level.
    - base_green: Base green light duration in seconds.
    - base_red: Base red light duration in seconds.
    """
    if traffic_level == 'Low':
        green_time = base_green * 0.5  # Short green light
        red_time = base_red * 0.5  # Short red light
    elif traffic_level == 'Normal':
        green_time = base_green  # Balanced green light
        red_time = base_red  # Balanced red light
    elif traffic_level == 'Heavy':
        green_time = base_green * 1.5  # Longer green light
        red_time = base_red * 1.5  # Longer red light
    else:
        green_time, red_time = base_green, base_red  # Default timing

    return green_time, red_time

# Function to process user input
def process_user_input():
    print("Enter the vehicle counts for traffic prediction.")
    try:
        car_count = int(input("Enter Car Count: "))
        bike_count = int(input("Enter Bike Count: "))
        bus_count = int(input("Enter Bus Count: "))
        truck_count = int(input("Enter Truck Count: "))
    except ValueError:
        print("Invalid input. Please enter integer values.")
        sys.exit(1)

    # Create input DataFrame within the function
    input_data = pd.DataFrame([{
        'CarCount': car_count,
        'BikeCount': bike_count,
        'BusCount': bus_count,
        'TruckCount': truck_count
    }])
    return input_data # Return the DataFrame

def main():
    # Get user input
    input_data = process_user_input()

    # Scale input data
    input_scaled = scaler.transform(input_data)

    # Predict traffic level
    predicted_traffic = model.predict(input_scaled)
    predicted_traffic_label = label_encoder.inverse_transform(predicted_traffic)[0]

    # Suggest signal timing
    green_time, red_time = suggest_signal_timing(predicted_traffic_label)

    # Output results
    print("\nTraffic Prediction Results:")
    print(f"Input Data: {input_data.iloc[0].to_dict()}")
    print(f"Predicted Traffic: {predicted_traffic_label}")
    print(f"Suggested Signal Timing: Green - {green_time}s, Red - {red_time}s")

# Run the main function
if __name__ == "__main__":
    main()